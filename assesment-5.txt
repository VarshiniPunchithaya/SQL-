Q1.

1.
create function fn_all_details()
returns table as return
select * from employee;

select * from fn_all_details()

2.
insert into fn_all_details() values (8088,'Ramesh','CLERK',8789,'2022-08-09',4500,Null,10) 
select * from fn_all_details() order by salary,deptno

3.
create function fn_CountRecords()
returns table as 
return
select count(empno) as no_of_records from employee


select * from fn_CountRecords()

4.
create function fn_EmployeeDetails(@deptno int)
returns table as return
select * from employee where deptno=@deptno

select * from fn_EmployeeDetails(30)

5.
select * from fn_all_details() order by salary,deptno

6.
update fn_all_details() set salary=500 where empno=(select top 1 empno from fn_all_details() order by empno desc );

7.
delete from fn_all_details() where empno=(select top 1 empno from fn_all_details() order by empno desc );

Q2.

1.
alter procedure sp_iphoneSale
@required int
as begin 
declare @availability int
select  @availability=quantityRemaining from product where productcode='p1'
if(@required !=1)
begin
RAISERROR('Only 1 unit of iphone pro max 13 to be sold',16,1);
end

else if(@availability<@required)
begin
RAISERROR('Unavailable units',16,1);
end
else
begin try
begin tran

update product set quantityRemaining=(quantityRemaining-@required), quantitysold=quantitysold+@required where productcode='p1';
declare @orderId int 
  select @orderId= case when max(order_id) is null then 0
  else max(order_id) end from sales
  set @orderId =@orderId+1;


  insert into sales values(@orderId,getdate(),'p1',@required,@required*1200);
commit tran
end try
begin catch
rollback tran
end catch
end


2.
alter procedure sp_ProMax
@required int,
@pcode varchar(5)
as begin 
declare @availability int
select  @availability=quantityRemaining from product where productcode=@pcode
if(@availability<@required)
begin 
RAISERROR('Unavailable units',16,1);
end

else
begin
begin try
begin tran

update product set quantityRemaining=(quantityRemaining-@required), quantitysold=quantitysold+@required where productcode=@pcode;
declare @orderId int 
  select @orderId= case when max(order_id) is null then 0
  else max(order_id) end from sales
  set @orderId =@orderId+1;
  declare @price int
  select @price=@required*price from product where productcode=@pcode

  insert into sales values(@orderId,getdate(),@pcode,@required,@price);

commit tran
end try
begin catch
rollback tran
end catch
end
end

