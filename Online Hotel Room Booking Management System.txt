

create database HotelManagement

table tbl_RoomDetails
table tbl_Customer
table tbl_RoomAvailabilityLog
table tbl_Billing
table tbl_BookingAudit
table tbl_Ratings
table tbl_AuditChanges
table tbl_FoodDetails
table tbl_HotelReview
table tbl_RoomAllocation

select * from tbl_RoomDetails  --SSIS From SQL to CSV
select * from tbl_Customer  --SSIS From SQL to Excel
select * from tbl_RoomAvailabilityLog
select * from tbl_Billing
select * from tbl_BookingAudit
select * from tbl_Ratings
select * from tbl_AuditChanges
select * from tbl_HotelReview
select * from tbl_FoodDetails
select * from tbl_RoomAllocation

create table tbl_RoomDetails(RoomTypeId varchar(10) primary key,
RoomType varchar(10),
Price numeric(10,2),
TotalRooms int);
insert into tbl_RoomDetails values('RT1','Non-AC',2500.00,20);
insert into tbl_RoomDetails values('RT2','AC',5000.00,20);
insert into tbl_RoomDetails values('RT3','Deluxe',10000.00,10);
insert into tbl_RoomDetails values('RT4','Suite',25000.00,10);
alter table tbl_RoomDetails alter column TotalRooms tinyint
alter table tbl_RoomDetails add  TotalRooms int 
update tbl_RoomDetails set TotalRooms=20 where RoomTypeId='RT1'
update tbl_RoomDetails set TotalRooms=20 where RoomTypeId='RT2'
update tbl_RoomDetails set TotalRooms=10 where RoomTypeId='RT3'
update tbl_RoomDetails set TotalRooms=10 where RoomTypeId='RT4'

create table tbl_Customer(CustomerId varchar(10) primary key,
FirstName varchar(10),
LastName varchar(10),
Contact numeric(10,0),
City varchar(20),
CheckIn smalldatetime,
CheckOut smalldatetime,
Numofadults int,
NumofKids int,
NumofRooms int,
RoomType varchar(10) foreign key references tbl_RoomDetails(RoomTypeId));
alter table tbl_Customer alter column FirstName varchar(30)
alter table tbl_Customer alter column LastName varchar(30)
alter table tbl_Customer alter column Contact varchar(10)
alter table tbl_Customer alter column Numofadults tinyint
alter table tbl_Customer alter column NumofKids tinyint
alter table tbl_Customer alter column NumofRooms tinyint

create table tbl_RoomAvailabilityLog(RoomType varchar(10),
CheckIn smalldatetime,
NumofBookedRooms int,
NumofRoomsAvailable int);
alter table tbl_RoomAvailabilityLog alter column NumofBookedRooms tinyint
alter table tbl_RoomAvailabilityLog alter column NumofRoomsAvailable tinyint
alter table tbl_RoomAvailabilityLog add CustomerId varchar(10) foreign key references tbl_Customer(Customerid) on delete cascade

create table tbl_billing(CustomerId varchar(10) foreign key references tbl_Customer(Customerid),
RoomType varchar(10),
NumofRooms int,
TotalPrice numeric(10,0));
alter table tbl_billing alter column NumofRooms tinyint
alter table tbl_billing alter column TotalPrice numeric(10,2)
ALTER TABLE tbl_Billing
ADD CONSTRAINT deletecascade FOREIGN KEY (CustomerId) 
REFERENCES tbl_Customer(CustomerId)
ON DELETE CASCADE;

 
create table tbl_BookingAudit (booking text);

create table ratings(userid varchar(10) foreign key references tbl_Customer(CustomerId), Rating tinyint);
insert into tbl_Ratings values('user1',3)
insert into tbl_Ratings values('user2',5)
insert into tbl_Ratings values('user3',4.5)
insert into tbl_Ratings values('user4',2.5)
insert into tbl_Ratings values('user5',4)
insert into tbl_Ratings values('user6',5)
insert into tbl_Ratings values('user7',4)
insert into tbl_Ratings values('user9',4)
insert into tbl_Ratings values('user10',3.5)
alter table tbl_Ratings alter column Rating numeric(5,1)


alter procedure sp_CustomerBooking
@CustomerId varchar(10),
@FirstName varchar(30),
@LastName varchar(30),
@Contact varchar(10),
@City varchar(20),
@CheckIn smalldatetime,
@CheckOut smalldatetime,
@Numofadults tinyint,
@NumofKids int,
@NumofRooms int,
@RoomType varchar(10)
as begin 

declare @Booked int,@Total int,@RoomsAvailable int
select @Booked=sum(NumofRooms) from tbl_Customer where CheckIn=@CheckIn and RoomType=@RoomType
select @Total=TotalRooms from tbl_RoomDetails where RoomTypeId=@RoomType
select @RoomsAvailable=@Total -@Booked

if(@CheckOut<@CheckIn)
begin
raiserror('Date and time of checkout must be after the checkin time',16,1);
end

else if((@Numofadults /@NumofRooms)>2)
begin
raiserror('Only 2 adults are allowed in a room, hence add a room',16,1);
end


else if(@NumofRooms>@RoomsAvailable)
begin
raiserror('Number exceeds the rooms available for the checkIn date',16,1);
end

else 
begin try
begin tran
insert into tbl_Customer values(@CustomerId ,@FirstName ,@LastName ,@Contact ,
@City ,
@CheckIn ,
@CheckOut ,
@Numofadults ,
@NumofKids ,
@NumofRooms ,
@RoomType )
commit tran

begin
declare @Book int,@All int,@RoomAvailable int
select @Book=sum(NumofRooms) from tbl_Customer where CheckIn=@CheckIn and RoomType=@RoomType
select @All=TotalRooms from tbl_RoomDetails where RoomTypeId=@RoomType
select @RoomAvailable=@All -@Book
begin tran
insert into tbl_RoomAvailabilityLog values(@RoomType,@CheckIn,@NumofRooms,@Roomavailable,@CustomerId)
commit tran
end

begin 
declare @cost numeric(10,2)
declare @roomprice numeric(10,2)
select @roomprice= price from tbl_RoomDetails where RoomtypeId=@RoomType
select @cost=@NumofRooms*@roomprice
begin tran
insert into tbl_Billing values(@CustomerId,@RoomType,@NumofRooms,@cost)
commit tran
end
end try

begin catch
rollback tran
end catch
end

alter procedure  usp_FoodCost 
@CustomerId varchar(10)
as begin
declare @Breakfast varchar(10),@Lunch varchar(10),@Dinner varchar(10)
select @Breakfast=Breakfast from tbl_FoodDetails where CustomerId=@CustomerId
select @Lunch=Lunch  from tbl_FoodDetails where CustomerId=@CustomerId
select @Dinner=Dinner from tbl_FoodDetails where CustomerId=@CustomerId
declare @NumofPeople smallint
select @NumofPeople=(NumofAdults+NumofKids) from tbl_Customer where CustomerId=@CustomerId
declare @Cost smallint=0
if(@Breakfast='Yes')
begin
select @Cost=@Cost+(250*@NumofPeople)
end
if(@Lunch='Yes')
begin
select @Cost=@Cost+(250*@NumofPeople)
end
if(@Dinner='Yes')
begin
select @Cost=@Cost+(250*@NumofPeople)
end
print @Cost
end

usp_FoodCost user1



sp_CustomerBooking 'user1','Bhoomika','Hegde',9539390628,'Mangalore','2023-05-11 12:00:00','2023-05-12 12:00:00',2,0,1,'RT4'
sp_CustomerBooking 'user2','Adithi','Shetty',9539264260,'Bangalore','2023-05-11 12:00:00','2023-05-12 12:00:00',2,1,1,'RT2'
sp_CustomerBooking 'user3','Neha','Shetty',9524684290,'Bangalore','2023-05-12 12:00:00','2023-05-13 12:00:00',2,1,1,'RT2'
sp_CustomerBooking 'user4','Adithya','Bhat',8169346258,'Mangalore','2023-05-11 12:00:00','2023-05-12 12:00:00',4,1,2,'RT2'
sp_CustomerBooking 'user5','Harshith' ,'Salian',8866429319,'Chennai','2023-05-16 12:00:00','2023-05-18 12:00:00',6,0,3,'RT4' 
sp_CustomerBooking 'user6','Yashoda' ,'Moger',958624317,'Kasargod','2023-05-16 12:00:00','2023-05-17 12:00:00',12,4,6,'RT3' 
sp_CustomerBooking 'user7','Amith' ,'Bhat',8462531790,'Pune','2023-05-16 12:00:00','2023-05-17 12:00:00',4,2,2,'RT3' 
sp_CustomerBooking 'user8','Sunidhi' ,'Patwardhan',9764310825,'Bangalore','2023-05-16 12:00:00','2023-05-17',4,1,2,'RT1' 
sp_CustomerBooking 'user9','Arjun' ,'Shetty',1672948320,'Bangalore','2023-05-17 12:00:00','2023-05-18 12:00:00',2,0,1,'RT1' 
sp_CustomerBooking 'user10','Athiya' ,'Shetty',1672948320,'Bangalore','2023-05-17 12:00:00','2023-05-17 12:00:00',6,0,3,'RT1' 
sp_CustomerBooking 'user11','Swathi' ,'P',815236975,'Bangalore','2023-05-17 12:00:00','2023-05-18 12:00:00',5,1,3,'RT2' 
sp_CustomerBooking 'user12','Neha','Mayya',9539390657,'Mangalore','2023-05-13 12:00:00','2023-05-14 12:00:00',4,1,3,'RT3'
sp_CustomerBooking 'user13','Sharanya' ,'P',815236938,'Mangalore','2023-05-15 12:00:00','2023-05-16 12:00:00',5,1,3,'RT2' 
sp_CustomerBooking 'user14','Sneha' ,'Pai',810236975,'Bangalore','2023-05-14 12:00:00','2023-05-15 12:00:00',5,1,3,'RT2' 
sp_CustomerBooking 'user15','Swara' ,'Rao',889236975,'Mangalore','2023-05-17 12:00:00','2023-05-18 12:00:00',5,1,3,'RT2' 

delete from tbl_Customer where CustomerId='user14'


create table tbl_HotelReview(Review nvarchar, Rating tinyint)
insert into tbl_HotelReview values ('nice hotel expensive parking got good deal stay hotel anniversary and arrived late evening took advice previous reviews did valet parking',4),
('location excellent short stroll main downtown shopping area and pet friendly room showed no signs animal hair smells',3),
('nice hotel but the staff quite rude',2),
('Good decor with friendly staff',4),
('Amazing stay with an amazing vuew from the hotel',5),
('Great place to be with family, friends and pets',5),
('Good rooms but the staff could have been more friendly',3),
('Had an amazing time with my family for the stay',4),
('Good amenities  provided be the swimming pool or food',4),
('Nice place to be with family and good location to click pics',5)

--SSIS (From Excel To SQL)
create table tbl_FoodDetails(CustomerId varchar(10),Breakfast varchar(5),Lunch varchar(5),Dinner varchar(5))


create procedure usp_Booked
as begin
select CheckIn,RoomType,sum(NumofRooms) as booked 
from tbl_Customer 
group by CheckIn,RoomType 
order by CheckIn,RoomType
end
usp_Booked

alter procedure usp_Ratings(@RoomType varchar(10))
as begin select Roomtype,cast(avg(Rating) as numeric(10,1)) as Average_Ratings 
from tbl_Ratings as r join tbl_Customer as c on r.userid=c.CustomerId  
group by RoomType 
having RoomType=@RoomType
end
usp_Ratings 'RT3'

alter trigger tr_CustomerInsert
on tbl_Customer for insert as 
begin
declare @userid varchar(5),@rooms int,@roomtype varchar(20),@numrooms int,@checkin smalldatetime,@checkout smalldatetime
select @userid=CustomerId,@rooms=NumofRooms,@checkin=CheckIn,@checkout=CheckOut,@roomtype=r.RoomType 
from inserted as i 
join tbl_RoomDetails as r on i.RoomType=r.RoomTypeId
insert into tbl_BookingAudit values('User with id '+cast(@userid as varchar)+' has booked '+cast(@rooms as varchar)+@roomtype+' rooms  '+cast(@checkin as varchar)+' to '+cast(@checkout as varchar))
end

create trigger tr_InsertCompletion
on tbl_Customer
for insert as
begin
print('The booking has been successfully completed');
end

alter trigger tr_delete
  on tbl_Customer
  for delete as begin declare @id varchar(10)
  select @id=CustomerId
  from deleted  
  insert into tbl_BookingAudit
  values('Customer with id ='+@id +' has cancelled their room booking')
  end
delete from tbl_Customer where CustomerId='user11'

alter trigger tr_UpdateRatings 
  on tbl_Ratings
  for update as begin
  declare @id varchar(10)
  declare @oldrating numeric(10,1),@newrating numeric(10,1)
  declare @AuditText varchar(1000)
  select * into #temptable from inserted 
  begin
  set @AuditText=''
  select top 1 @id=userid,@newrating=Rating from #temptable
  select @rating=rating from deleted where userid=@id
  if(@oldrating<>@newrating)
  set @AuditText='Customer with id '+cast(@id as varchar)+' has changed ratings from '+cast(@oldrating as varchar)+' to '+cast(@newrating as varchar)

  insert into tbl_BookingAudit values(@AuditText)
  delete from #temptable where userid=@id
  end
  end
  update tbl_Ratings set Rating=3.0 where userid='user1'
delete from tbl_Ratings where userid='user1'

alter trigger tr_CustomerUpdate
  on tbl_Customer
  for update as begin 
  declare @id varchar(10)
  declare @oldCheckOut smalldatetime,@newCheckOut smalldatetime
  declare @oldCheckIn smalldatetime,@newCheckIn smalldatetime
  declare @oldroomtype varchar(10),@newroomtype varchar(10)
  declare @AuditText varchar(1000)
  select * into #temptable from inserted
  while(exists(select CustomerId from #temptable))
  begin
  set @AuditText=''
  select top 1 @id=CustomerId,@newCheckIn=CheckIn,@newCheckOut=CheckOut,@newroomtype=RoomType from #temptable
  select @oldCheckIn=CheckIn,@oldCheckOut=CheckOut,@oldroomtype=RoomType from deleted where CustomerId=@id
  set @AuditText='Customer with id='+cast(@id as varchar)+'changed'
  if (@oldCheckIn<> @newCheckIn )
  set @AuditText=@AuditText+'CheckIn date from'+cast(@oldCheckIn as varchar) +' to '+cast(@newCheckIn as varchar)
  if(@oldCheckOut <>@newCheckOut)
  set @AuditText=@AuditText+'CheckOut date from'+cast(@oldCheckOut  as varchar)+' to '+cast(@newCheckOut as varchar)
  if(@oldroomtype <>@newroomtype)
  set @AuditText=@AuditText+'RoomType from'+cast(@oldroomtype  as varchar)+' to '+cast(@newroomtype as varchar)
  insert into tbl_BookingAudit values (@AuditText)
  delete from #temptable where CustomerId=@id
  end
  end
update tbl_Customer set RoomType='RT3' where CustomerId='user9'


delete  tbl_Customer
delete  tbl_Billing
delete  tbl_BookingAudit
delete tbl_RoomAvailabilityLog
delete tbl_Ratings
delete from tbl_HotelReview
delete from tbl_FoodDetails


create table tbl_AuditChanges(
DatabaseName varchar(20),
TableName varchar(20),
EventType varchar(20),
LoginName varchar(20),
SqlCommand varchar(2000),
AuditDateTime datetime);
select * from tbl_AuditChanges

create trigger tr_ForTableChanges
on database
for create_table,alter_table,drop_table,rename
as
begin
declare  @EventData xml
select @EventData=eventdata();
insert into HotelManagement.dbo.tbl_AuditChanges(DatabaseName ,TableName ,EventType ,LoginName ,SqlCommand ,AuditDateTime ) values
(@EventData.value('(/EVENT_INSTANCE/DatabaseName)[1]', 'varchar(20)'),
@EventData.value('(/EVENT_INSTANCE/ObjectName)[1]', 'varchar(20)'),
@EventData.value('(/EVENT_INSTANCE/EventType)[1]', 'varchar(20)'),
@EventData.value('(/EVENT_INSTANCE/LoginName)[1]', 'varchar(20)'),
@EventData.value('(/EVENT_INSTANCE/TSQLCommand/CommandText)[1]', 'varchar(2000)'), getdate())
end
exec sp_rename 'tbl_RoomAvailabilityLog.NumofBookedRooms', 'NumofRoomsBooked'

create view vw_Amenities
as select fd.CustomerId,rd.RoomType,Breakfast,Lunch,Dinner from tbl_FoodDetails as fd 
join tbl_Customer as c on fd.CustomerId=c.CustomerId 
join tbl_RoomDetails as rd on c.RoomType=rd.RoomTypeId
select * from vw_Amenities

create view vw_RatingDetails
as
select UserId,rd.RoomType,Rating from tbl_Customer as c 
join tbl_Ratings as r on c.CustomerId=r.UserId 
join tbl_RoomDetails as rd on c.RoomType=rd.RoomTypeId
select * from vw_RatingDetails


--View to find the details of the most valued customer
alter view vw_MostValuableCustomer
as select RoomType,max(NumOfRoomsBooked) as MaxRoom from tbl_RoomAvailabilityLog group by RoomType

select m.*,CustomerId,concat(FirstName,' ',LastName) as CustomerName 
from vw_MostValuableCustomer as m 
join tbl_Customer as c on m.RoomType=c.RoomType and m.MaxRoom=c.NumofRooms


create function fn_discounts()
returns @tblCustomer table
(CustomerId varchar(10),RoomType varchar(10),Discount varchar(10))
as begin
insert into @tblCustomer
select CustomerId,RoomType,case when NumofRooms>5 then  'Yes' else 'No' end as Discount 
from tbl_Customer
return 
end
select * from fn_discounts()

create function fn_availability(@RoomType varchar(10),@CheckIn smalldatetime,@NumRooms smallint)
returns @tblAvailability table
(RoomType varchar(10),NumRooms smallint,AvailabilityStatus varchar(10))
as begin
insert into @tblAvailability
select RoomType,@NumRooms,case when @NumRooms<NumofRoomsAvailable then 'Yes' else 'No' end as AvailabilityStatus 
from tbl_RoomAvailabilityLog 
where  RoomType=@RoomType and CheckIn=@CheckIn
return
end
select * from tbl_RoomAvailabilityLog
exec sp_help tbl_RoomAvailabilityLog
select * from fn_availability('RT4','2023-05-16 12:00:00',3)

alter function fn_FoodCost(@CustomerId varchar(10))
returns smallint
as begin
declare @Breakfast varchar(10),@Lunch varchar(10),@Dinner varchar(10)
select @Breakfast=Breakfast from tbl_FoodDetails where CustomerId=@CustomerId
select @Lunch=Lunch  from tbl_FoodDetails where CustomerId=@CustomerId
select @Dinner=Dinner from tbl_FoodDetails where CustomerId=@CustomerId
declare @NumofPeople smallint
select @NumofPeople=(NumofAdults+NumofKids) from tbl_Customer where CustomerId=@CustomerId
declare @Cost smallint
set @Cost=0
if (@Breakfast='Yes')  
set @Cost=@Cost+(250*@NumofPeople)
if (@Lunch='Yes') 
set @Cost=@Cost+(250*@NumofPeople)
if (@Dinner='Yes') 
set @Cost=@Cost+(250*@NumofPeople)
return @Cost
end
select dbo.fn_FoodCost('user1') as TotalCost


--BriefPaymentDetails
alter function fn_PaymentDescription(@id varchar(10))
returns table as return 
select concat(FirstName,' ',LastName) as CustomerName,b.RoomType,r.RoomType as RoomName,b.NumofRooms,CheckIn,NumofAdults,NumofKids,Price as PricePerRoom,dbo.fn_FoodCost(@id) as FoodCost,(TotalPrice+dbo.fn_FoodCost(@id)) as TotalPrice
from tbl_Customer as c 
join tbl_Billing as b on c.CustomerId=b.CustomerId 
join tbl_RoomDetails as r on r.RoomTypeId=b.RoomType
where c.CustomerId=@id
select * from fn_PaymentDescription('user1')

select * from tbl_Billing

--function to review the hotel rating
alter function fn_RatingReview(@Rating int)
returns table as return
select Review from tbl_HotelReview  where Rating=@Rating 
select * from fn_RatingReview(2)

--CommonTableExpressions(cte)

with cte_RoomCheckInBasedOnRoomType as
(select CustomerId,FirstName,r.RoomType,CheckIn,ROW_NUMBER() over (partition by CheckIn order by CheckIn,c.RoomType) as CustomersCheckedInOnEachDate
from tbl_Customer as c 
join tbl_RoomDetails as r on r.RoomTypeId=c.RoomType)
select * from cte_RoomCheckInBasedOnRoomType

with cte_BookedRooms as
(select r.RoomType as RoomName,c.RoomType,count(c.RoomType) as RoomBooked 
from tbl_Customer as c 
join tbl_RoomDetails as r on r.RoomTypeId=c.RoomType 
group by r.RoomType,c.RoomType)
select RoomBooked from cte_BookedRooms where RoomName='Suite'

with cte_UpdateKidDetails as
(select c.*,r.RoomType as RoomName from tbl_Customer as c 
join tbl_RoomDetails as r on r.RoomTypeId=c.RoomType)
update cte_UpdateKidDetails set NumofKids=3 where CustomerId='user10'
select * from tbl_Customer

with cte_BriefPaymentDetails as
(select concat(FirstName,' ',LastName) as CustomerName,b.RoomType,r.RoomType as RoomName,b.NumofRooms,CheckIn,NumofAdults,Price as PricePerRoom,TotalPrice 
from tbl_Customer as c 
join tbl_Billing as b on c.CustomerId=b.CustomerId 
join tbl_RoomDetails as r on r.RoomTypeId=b.RoomType)
select * from cte_BriefPaymentDetails


--Recursive CTE
with cte_RoomCheckInBasedOnCheckIandRoomType(CustomerId,FirstName,RoomType,CheckIn,Level) as
(select CustomerId,FirstName,r.RoomType,CheckIn,1 as Level
from tbl_Customer as c 
join tbl_RoomDetails as r on r.RoomTypeId=c.RoomType 
where CheckIn in (select min(CheckIn) from tbl_Customer)
union all
select c.CustomerId,c.FirstName,r.RoomType,c.CheckIn,rc.Level+1 as Level
from tbl_Customer as c 
join tbl_RoomDetails as r on r.RoomTypeId=c.RoomType 
join cte_RoomCheckInBasedOnCheckIandRoomType as rc on  c.CheckIn=rc.CheckIn+1 

)
select distinct CustomerId,FirstName,RoomType,CheckIn,[Level] from cte_RoomCheckInBasedOnCheckIandRoomType order by Level

select distinct CustomerId,FirstName,RoomType,CheckIn,dense_rank() over(order by CheckIn) from cte_RoomCheckInBasedOnCheckIandRoomType

--Table Type
create type ut_RoomDetails as table 
(
RoomTypeId varchar(10) ,
RoomType varchar(10),
Price numeric(10,2),
TotalRooms tinyint
)

alter procedure usp_InsertRoomDetails(@RoomDetails [ut_RoomDetails] ReadOnly)
as
begin
insert into dbo.tbl_RoomDetails
(
RoomTypeId,
RoomType,
Price,
TotalRooms
)
select * from @RoomDetails
end

declare @Detail as [ut_RoomDetails];
insert into @Detail
select 'RT5','HomeStay',50000,2 union
select 'RT6','Villa',75000,1
exec dbo.usp_InsertRoomDetails @Detail

select * from tbl_RoomDetails


--Recursive cte stored procedure

create table tbl_RoomAllocation(CheckIn smalldatetime,RoomType varchar(10),TotalRoom tinyint,RoomsAllocatedforCheckInAndRoomType varchar(100))

select * from tbl_RoomAllocation
select * from tbl_RoomAvailabilityLog

alter procedure usp_RecursiveRoomAllocation
@CheckIn smalldatetime,
@RoomType varchar(10),
@Number tinyint,
@i tinyint,
@AllocatedRooms varchar(100) output
as
begin
if(@Number!=0)
begin

if (@i=@Number)
begin
set @AllocatedRooms=isnull(@AllocatedRooms,' ')+@RoomType+'Room'+cast(@i as varchar);
exec usp_RoomAllocationBasedOnCheckIn @CheckIn,@RoomType,@AllocatedRooms output;
end

else
begin
set @AllocatedRooms=isnull(@AllocatedRooms,' ')+@RoomType+'Room'+cast(@i as varchar);
exec usp_RoomAllocationBasedOnCheckIn @CheckIn,@RoomType,@AllocatedRooms output;
declare @newi int=@i+1
exec usp_RecursiveRoomAllocation @CheckIn,@RoomType,@Number,@newi,@AllocatedRooms OUTPUT;
end
end
else
raiserror('No rooms have been booked',16,1)
while(@Number=0)
begin
break;
end

end

declare @AllocatedRooms varchar(max)
declare @num tinyint
select @num=sum(NumofRoomsBooked) 
from tbl_RoomAvailabilityLog 
where Checkin='2023-05-16 12:00:00' and RoomType='RT3'
EXEC usp_RecursiveRoomAllocation '2023-05-16 12:00:00','RT3',@num,1,@AllocatedRooms output


select * from tbl_RoomAllocation
select * from tbl_RoomAvailabilityLog

select @AllocatedRooms as RoomsAllocated

alter procedure usp_RoomAllocationBasedOnCheckIn
@CheckIn smalldatetime,
@RoomType varchar(10),
@AllocatedRooms varchar(max) output
as begin
declare @TotalRooms tinyint
select @TotalRooms=sum(NumofRoomsBooked) from tbl_RoomAvailabilityLog where CheckIn=@CheckIn and RoomType=@RoomType
IF not EXISTS (SELECT 0 FROM tbl_RoomAllocation WHERE CheckIn=@CheckIn and RoomType=@RoomType )
    BEGIN
	begin tran
     INSERT INTO tbl_RoomAllocation VALUES (@CheckIn,@RoomType,@TotalRooms,@AllocatedRooms);   
	commit tran
    END
    ELSE
    BEGIN
	begin tran
	UPDATE tbl_RoomAllocation
        SET RoomsAllocatedforCheckInAndRoomType=@AllocatedRooms,TotalRoom=@TotalRooms
		WHERE CheckIn = @CheckIn and RoomType=@RoomType ;
        
	commit tran
    END
END
